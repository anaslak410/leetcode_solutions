from typing import List


class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        sudoks = {}
        for x in range(len(board)):
            for y in range(len(board)):

                cell = board[x][y]
                if cell == '.':
                    continue
                elif cell in sudoks:
                    for matching_cell in sudoks[cell]:
                        cell_same_value = matching_cell
                        x2 = cell_same_value[0]
                        y2 = cell_same_value[1]
                        if x2 == x:
                            return False
                        if cell_same_value[1] == y:
                            return False
                        if ((x2) // 3 == (x) // 3) & ((y2) // 3 == (y) // 3):
                            return False
                    sudoks[cell].append((x, y))
                else:
                    sudoks[cell] = [(x, y)]
        return True


if __name__ == "__main__":
    print(6 // 3)
    sol = Solution()
    # sol.isValidSudoku([["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], [
    #                   "4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]])

    # sol.isValidSudoku([[".", ".", "4", ".", ".", ".", "6", "3", "."],
    #                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    #                    ["5", ".", ".", ".", ".", ".", ".", "9", "."],
    #                    [".", ".", ".", "5", "6", ".", ".", ".", "."],
    #                    ["4", ".", "3", ".", ".", ".", ".", ".", "1"],
    #                    [".", ".", ".", "7", ".", ".", ".", ".", "."],
    #                    [".", ".", ".", "5", ".", ".", ".", ".", "."],
    #                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    #                    [".", ".", ".", ".", ".", ".", ".", ".", "."]])

    sol.isValidSudoku([[".", ".", ".", ".", "5", ".", ".", "1", "."],
                       [".", "4", ".", "3", ".", ".", ".", ".", "."],
                       [".", ".", ".", ".", ".", "3", ".", ".", "1"],
                       ["8", ".", ".", ".", ".", ".", ".", "2", "."],
                       [".", ".", "2", ".", "7", ".", ".", ".", "."],
                       [".", "1", "5", ".", ".", ".", ".", ".", "."],
                       [".", ".", ".", ".", ".", "2", ".", ".", "."],
                       [".", "2", ".", "9", ".", ".", ".", ".", "."],
                       [".", ".", "4", ".", ".", ".", ".", ".", "."]])
